{"version":3,"sources":["Display.tsx","Button.tsx","EntryFiled.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","message","counter","Button","onClick","clickButton","disabled","state","title","EntryField","type","value","onChange","App","useState","startValue","setStartValue","maxValue","setMaxValue","setCounter","status","setStatus","useEffect","startValueAsString","localStorage","getItem","maxValueAsString","newStartValue","JSON","parse","newMaxValue","setItem","stringify","e","nextStartValue","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f1e6199.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport {StatusType} from \"./App\";\r\n\r\ntype DisplayPropsType = {\r\n    className: string\r\n    counter?: number\r\n    message?: string\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n    return (\r\n        <div className='display'><p className={props.className}>\r\n            {props.message ? props.message : props.counter}</p></div>\r\n    )\r\n}","import React from \"react\";\r\nimport './App.css';\r\n\r\ntype ButtonPropsType = {\r\n    // string, number, boolean, () => void\r\n    clickButton: () => void\r\n    title: string\r\n    state: boolean\r\n    className : string\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <button onClick={props.clickButton}\r\n                className={props.className}\r\n            disabled={!props.state}>{props.title}\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport './App.css';\r\n\r\ntype entryFieldPropsType = {\r\n    className: string\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function EntryField(props: entryFieldPropsType) {\r\n    return(\r\n        <div>\r\n             <input type='number' className={props.className} value={props.value} onChange={props.onChange} />\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Display} from \"./Display\";\nimport {Button} from \"./Button\";\nimport {EntryField} from \"./EntryFiled\";\n\nexport type StatusType = 'Setting' | 'Error' | 'Count'\n\nfunction App() {\n    const [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(1)\n    const [counter, setCounter] = useState<number>(startValue)\n    const [status, setStatus] = useState<StatusType>('Setting')\n\n    const truValues = ((startValue >= 0) && (maxValue >= 0) && (startValue < maxValue))\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        const nextStartValue = +e.currentTarget.value\n        setStartValue(nextStartValue)\n        if ((nextStartValue >= 0) && (maxValue >= 0) && (nextStartValue < maxValue)) {\n            setStatus('Setting')\n        } else {\n            setStatus('Error')\n        }\n    }\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxValue(+e.currentTarget.value)\n        if ((startValue >= 0) && (maxValue >= 0) && (startValue < maxValue)) {\n            setStatus('Setting')\n        } else {\n            setStatus('Error')\n        }\n    }\n    const setButton = () => {\n        setStartValue(startValue)\n        setMaxValue(maxValue)\n        setCounter(startValue)\n        setStatus('Count')\n    }\n    const incButton = () => {\n        setCounter(counter + 1)//+1\n    }\n    const resetButton = () => {\n        setCounter(startValue)\n    }\n\n    useEffect(() => {\n        let startValueAsString = localStorage.getItem('startValue')\n        let maxValueAsString = localStorage.getItem('maxValue')\n\n        if (startValueAsString) {\n            let newStartValue = JSON.parse(startValueAsString)\n            setStartValue(newStartValue)\n        }\n        if (maxValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString)\n            setMaxValue(newMaxValue)\n        }\n    }, [])\n\n    // useEffect(() => {\n    // debugger\n    // let startValueAsString = localStorage.getItem('startValue')\n    // if (startValueAsString) {\n    //     let newStartValue = JSON.parse(startValueAsString)\n    //     setStartValue(newStartValue)\n    // }\n    // }, [])\n\n    // useEffect(() => {\n    // debugger\n    // let maxValueAsString = localStorage.getItem('maxValue')\n    // if (maxValueAsString) {\n    //     let newMaxValue = JSON.parse(maxValueAsString)\n    //     setMaxValue(newMaxValue)\n    // }\n    // }, [])\n\n    useEffect(() => {\n        // debugger\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [startValue])\n\n    useEffect(() => {\n        // debugger\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }, [maxValue])\n\n    return (\n        <div>\n            <div className='wrapper'>\n                <p className='textSetting'>Start Value</p>\n                <EntryField\n                    className={status === 'Error' ? 'input-initial-error' : 'input-initial'}\n                    value={startValue}\n                    onChange={onChangeStartValue}/>\n                <p className='textSetting'>Max Value</p>\n                <EntryField\n                    className={status === 'Error' ? 'input-initial-error' : 'input-initial'}\n                    value={maxValue}\n                    onChange={onChangeMaxValue}/>\n                <div>\n                    <Button\n                        state={status === 'Setting'}\n                        title=\"set\"\n                        clickButton={setButton}\n                        className='button-set'/>\n                </div>\n            </div>\n            <div className='wrapper'>\n                <Display\n                    className={status === 'Setting' ? 'display-text-setting' : status === 'Error' ? 'display-text-error' : counter < maxValue ? 'textDisplay' : 'attentionDisplay'}\n                    message={status === 'Error' ? 'Error' : status === 'Setting' ? 'Enter value and press Set' : ''}\n                    counter={counter <= maxValue ? counter : maxValue}\n                />\n                <div className='display-button'>\n\n                    <Button\n                        state={counter < maxValue}\n                        title=\"inc\"\n                        clickButton={incButton}\n                        className='button-inc'/>\n                    <Button\n                        state={counter > startValue}\n                        title=\"reset\"\n                        clickButton={resetButton}\n                        className='button-reset'/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}